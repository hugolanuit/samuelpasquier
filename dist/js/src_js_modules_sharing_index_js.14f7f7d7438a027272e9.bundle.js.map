{"version":3,"file":"js/src_js_modules_sharing_index_js.14f7f7d7438a027272e9.bundle.js","mappings":"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","sources":["webpack://samuelpasquier/./node_modules/clipboard-copy/index.js","webpack://samuelpasquier/./src/js/modules/module/Module.js","webpack://samuelpasquier/./src/js/modules/sharing/Sharing.js","webpack://samuelpasquier/./src/js/modules/sharing/index.js","webpack://samuelpasquier/./src/js/modules/sharing/factory.js"],"sourcesContent":["/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy\n\nfunction makeError () {\n  return new DOMException('The request is not allowed', 'NotAllowedError')\n}\n\nasync function copyClipboardApi (text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (!navigator.clipboard) {\n    throw makeError()\n  }\n  return navigator.clipboard.writeText(text)\n}\n\nasync function copyExecCommand (text) {\n  // Put the text to copy into a <span>\n  const span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  span.style.webkitUserSelect = 'auto'\n  span.style.userSelect = 'all'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  const selection = window.getSelection()\n  const range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  let success = false\n  try {\n    success = window.document.execCommand('copy')\n  } finally {\n    // Cleanup\n    selection.removeAllRanges()\n    window.document.body.removeChild(span)\n  }\n\n  if (!success) throw makeError()\n}\n\nasync function clipboardCopy (text) {\n  try {\n    await copyClipboardApi(text)\n  } catch (err) {\n    // ...Otherwise, use document.execCommand() fallback\n    try {\n      await copyExecCommand(text)\n    } catch (err2) {\n      throw (err2 || err || makeError())\n    }\n  }\n}\n","class Module {\n  init() {}\n\n  // called during Barba's afterEnter hook.\n  start() {}\n\n  // called during Barba's beforeLeave hook.\n  stop() {}\n\n  // called during Barba's afterLeave hook.\n  destroy() {}\n\n  // getter - setter\n  get name() {\n    return null;\n  }\n}\n\nexport default Module;\n","import copy from \"clipboard-copy\";\n\nimport { $ } from \"@utils/dom\";\nimport { on, off } from \"@utils/listener\";\n\nclass Sharing {\n  constructor(el) {\n    this.el = el;\n    this.copyBtn = $('.sharing__copyBtn');\n    this.copyMessage = $('.sharing__copyMessage');\n\n    this._copyPromise = null;\n    this._copyTick = null;\n\n    this._onCopyClick = this._onCopyClick.bind(this);\n    this._onCopySuccess = this._onCopySuccess.bind(this);\n    this._onCopyError = this._onCopyError.bind(this);\n    this._copyCompleted = this._copyCompleted.bind(this);\n    \n    this.init();\n  }\n  \n  init() {\n    this._bindEvents();\n  }\n  destroy() {\n    if( this._copyTick ) clearTimeout(this._copyTick);\n    this._unbindEvents();\n\n    this.el = null;\n    this.copyBtn = null;\n    this.copyMessage = null;\n\n    this._copyPromise = null;\n    this._copyTick = null;\n\n    this._onCopyClick = null;\n    this._onCopySuccess = null;\n    this._onCopyError = null;\n    this._copyCompleted = null;\n  }\n  \n  _bindEvents() {\n    if( this.copyBtn ) on(this.copyBtn, 'click', this._onCopyClick);\n  }\n  _unbindEvents() {\n    if( this.copyBtn ) off(this.copyBtn, 'click', this._onCopyClick);\n  }\n\n  _onCopyClick(event) {\n    if( event ) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n    \n    // if promise exist, it means copying is in progress\n    if( this._copyPromise ) return;\n\n    this._copyPromise = copy(this.copyBtn.dataset.sharingCopyUrl)\n      .then(this._onCopySuccess)\n      .catch(this._onCopyError);\n  }\n  _onCopySuccess() {\n    if( this.copyMessage ) {\n      this.copyMessage.setAttribute('aria-hidden', false);\n      this._copyTick = setTimeout(this._copyCompleted, 3000);\n    }\n  }\n  _onCopyError(error) {\n    console.log(error);\n    this._copyPromise = null;\n  }\n  _copyCompleted() {\n    if( this.copyMessage ) this.copyMessage.setAttribute('aria-hidden', true);\n    this._copyPromise = null;\n  }\n}\n\nexport default Sharing;\n","import Factory from \"./factory\";\n\nexport const instance = new Factory();\n\nexport default { instance };\n","import { $$ } from \"@utils/dom\";\n\nimport Module from \"../module/Module\";\nimport Sharing from \"./Sharing\";\n\nexport const SELECTOR = `[data-sharing]`;\n\nclass Factory extends Module {\n  constructor(init = false) {\n    super();\n\n    this.initialized = false;\n    this.items = null;\n\n    init ? this.init() : null;\n  }\n\n  get name() {\n    return \"Sharing\";\n  }\n\n  init() {\n    // set initialized\n    this.initialized = true;\n    this.items = [...$$(SELECTOR)].map(el => new Sharing(el, this.emitter));\n  }\n  destroy() {\n    if (this.items) this.items.forEach(el => el.destroy());\n\n    this.initialized = false;\n    this.items = null;\n  }\n}\n\nexport default Factory;\n"],"names":["makeError","DOMException","module","exports","async","text","navigator","clipboard","writeText","copyClipboardApi","err","span","document","createElement","textContent","style","whiteSpace","webkitUserSelect","userSelect","body","appendChild","selection","window","getSelection","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","removeChild","copyExecCommand","err2","Module","init","start","stop","destroy","name","Sharing","el","this","copyBtn","$","copyMessage","_copyPromise","_copyTick","_onCopyClick","bind","_onCopySuccess","_onCopyError","_copyCompleted","_bindEvents","clearTimeout","_unbindEvents","on","off","event","preventDefault","stopImmediatePropagation","copy","dataset","sharingCopyUrl","then","catch","setAttribute","setTimeout","error","console","log","instance","Factory","initialized","items","$$","map","emitter","forEach"],"sourceRoot":""}