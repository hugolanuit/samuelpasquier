{"version":3,"file":"js/src_js_ui_site-nav_index_js.7e27ae77e1edfe60c06e.bundle.js","mappings":"wrCAGO,IACMA,EAAY,uBAEnBC,EAAN,W,SAAMA,K,qGAEFC,KAAKC,aAAc,EACnBD,KAAKE,SAAU,EAEfF,KAAKG,gBAAkBH,KAAKG,gBAAgBC,KAAKJ,MACjDA,KAAKK,eAAiBL,KAAKK,eAAeD,KAAKJ,MAC/CA,KAAKM,kBAAoBN,KAAKM,kBAAkBF,KAAKJ,M,0BAGnDO,IAAAA,O,IAAJ,WACE,MAAQ,Y,CAGVC,IAAAA,O,MAAAA,WACER,KAAKC,aAAc,EACnBD,KAAKE,SAAU,EAEfF,KAAKS,YAAaC,EAAAA,EAAAA,GAAE,gBACpBV,KAAKW,IAAKD,EAAAA,EAAAA,GAtBW,mBAuBrBV,KAAKY,SAAW,GAAIC,EAAAA,EAAAA,IAAI,mBAA6B,OAAXb,KAAKW,GAAGG,GAAG,QAErDd,KAAKe,gB,CAEPC,IAAAA,U,MAAAA,WACEhB,KAAKiB,gBAELjB,KAAKS,WAAa,KAClBT,KAAKW,GAAK,KACVX,KAAKY,SAAW,KAEhBZ,KAAKE,SAAU,EACfF,KAAKC,aAAc,I,CAGrBc,IAAAA,c,MAAAA,WACMf,KAAKY,WAAUM,EAAAA,EAAAA,IAAGlB,KAAKY,SAAU,QAASZ,KAAKG,kBACnDe,EAAAA,EAAAA,IAAGC,OAAQ,UAAWnB,KAAKK,gBAC3BL,KAAKoB,QAAQF,GAAG,iBAAkBlB,KAAKG,mB,CAEzCc,IAAAA,gB,MAAAA,WACMjB,KAAKY,WAAUS,EAAAA,EAAAA,IAAIrB,KAAKY,SAAU,QAASZ,KAAKG,kBACpDkB,EAAAA,EAAAA,IAAIF,OAAQ,UAAWnB,KAAKK,gBAC5BL,KAAKoB,QAAQC,IAAI,iBAAkBrB,KAAKG,mB,CAG1CmB,IAAAA,O,MAAAA,YAEuB,IAAjBtB,KAAKE,UACTF,KAAKE,SAAU,EAGfF,KAAKuB,MAAMC,SAAS,WAAYxB,KAAKE,SAGrCuB,EAAAA,GAAAA,UAAAA,IAAmB3B,GAGnBE,KAAKoB,QAAQM,KAAK,mBAGlB1B,KAAKY,SAASe,SAAQC,SAAAA,GACpBA,EAAIC,aAAa,iBAAiB,GAClCD,EAAIE,UAAUC,IAAI,gBAIpB/B,KAAKW,GAAGkB,aAAa,eAAe,M,CAEtCG,IAAAA,Q,MAAAA,YAEuB,IAAjBhC,KAAKE,UACTF,KAAKE,SAAU,EAGfF,KAAKuB,MAAMC,SAAS,WAAYxB,KAAKE,SAGrCF,KAAKY,SAASe,SAAQC,SAAAA,GACpBA,EAAIC,aAAa,iBAAiB,GAClCD,EAAIE,UAAUG,OAAO,gBAIvBR,EAAAA,GAAAA,UAAAA,OAAsB3B,GAGtBE,KAAKM,uB,CAEP4B,IAAAA,S,MAAAA,YAEuB,IAAjBlC,KAAKE,QAAkBF,KAAKgC,QAC3BhC,KAAKsB,S,CAGZnB,IAAAA,kB,MAAAA,SAAgBgC,GACVA,IACFA,EAAMC,iBACND,EAAME,mBAGRrC,KAAKkC,W,CAEP7B,IAAAA,iB,MAAAA,SAAe8B,IACQ,IAAjBnC,KAAKE,SAAmC,WAAdiC,EAAMG,KAAkC,QAAdH,EAAMG,KAC5DtC,KAAKgC,U,CAGT1B,IAAAA,oB,MAAAA,YACuB,IAAjBN,KAAKE,UAGTF,KAAKoB,QAAQM,KAAK,oBAGlB1B,KAAKW,GAAGkB,aAAa,eAAe,M,CAIlCU,IAAAA,S,IAAJ,WACE,OAAOvC,KAAKE,a,6BAxHhB,GCJO,IAAMsC,EAAW,IDgIxB,EC9HA,SAAiBA,SAAAA","sources":["webpack://samuelpasquier/./src/js/ui/site-nav/SiteNav.js","webpack://samuelpasquier/./src/js/ui/site-nav/index.js"],"sourcesContent":["import { $, $$, body } from \"@utils/dom\";\nimport { on, off } from \"@utils/listener\";\n\nexport const SELECTOR = `[data-site-nav]`;\nexport const CLASSNAME = \"--js-site-nav-opened\";\n\nclass SiteNav {\n  constructor() {\n    this.initialized = false;\n    this._opened = false;\n\n    this._handleTriggers = this._handleTriggers.bind(this);\n    this._handleKeyDown = this._handleKeyDown.bind(this);\n    this._onCloseCompleted = this._onCloseCompleted.bind(this);\n  }\n\n  get name() {\n    return `SiteNav`;\n  }\n\n  init() {\n    this.initialized = true;\n    this._opened = false;\n\n    this.siteHeader = $(\".site-header\");\n    this.el = $(SELECTOR);\n    this.triggers = [...$$(`[aria-controls=\"${this.el.id}\"]`)];\n\n    this._bindEvents();\n  }\n  destroy() {\n    this._unbindEvents();\n\n    this.siteHeader = null;\n    this.el = null;\n    this.triggers = null;\n\n    this._opened = false;\n    this.initialized = false;\n  }\n\n  _bindEvents() {\n    if (this.triggers) on(this.triggers, \"click\", this._handleTriggers);\n    on(window, \"keydown\", this._handleKeyDown);\n    this.emitter.on(\"SiteNav.toggle\", this._handleTriggers);\n  }\n  _unbindEvents() {\n    if (this.triggers) off(this.triggers, \"click\", this._handleTriggers);\n    off(window, \"keydown\", this._handleKeyDown);\n    this.emitter.off(\"SiteNav.toggle\", this._handleTriggers);\n  }\n\n  open() {\n    // if SiteNav is already opened, do nothing\n    if (this._opened === true) return;\n    this._opened = true;\n\n    // dispatch to state current status\n    this.state.dispatch(\"SITE_NAV\", this._opened);\n\n    // inform <body> that SiteNav is opened\n    body.classList.add(CLASSNAME);\n\n    // stop page scroll\n    this.emitter.emit(\"SiteScroll.stop\");\n\n    // inform each triggers that SiteNav is opened\n    this.triggers.forEach(btn => {\n      btn.setAttribute(\"aria-expanded\", true);\n      btn.classList.add(\"is-active\");\n    });\n\n    // set SiteNav visible for screen readers\n    this.el.setAttribute(\"aria-hidden\", false);\n  }\n  close() {\n    // if SiteNav isn't opened, do nothing\n    if (this._opened === false) return;\n    this._opened = false;\n\n    // dispatch to state current status\n    this.state.dispatch(\"SITE_NAV\", this._opened);\n\n    // inform triggers that SiteNav is closed\n    this.triggers.forEach(btn => {\n      btn.setAttribute(\"aria-expanded\", false);\n      btn.classList.remove(\"is-active\");\n    });\n\n    // inform <body> that SiteNav is closed\n    body.classList.remove(CLASSNAME);\n\n    // close callback (should be call at animation's end)\n    this._onCloseCompleted();\n  }\n  toggle() {\n    // regular SiteNav toggle handling\n    if (this._opened === true) this.close();\n    else this.open();\n  }\n\n  _handleTriggers(event) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    this.toggle();\n  }\n  _handleKeyDown(event) {\n    if (this._opened === true && (event.key === \"Escape\" || event.key === \"Esc\")) {\n      this.close();\n    }\n  }\n  _onCloseCompleted() {\n    if (this._opened === true) return;\n\n    // restart page scroll\n    this.emitter.emit(\"SiteScroll.start\");\n\n    // hide SiteNav from screen readers\n    this.el.setAttribute(\"aria-hidden\", true);\n  }\n\n  // getters\n  get opened() {\n    return this._opened;\n  }\n}\n\nexport default SiteNav;\n","import SiteNav from \"./SiteNav\";\n\nexport const instance = new SiteNav();\n\nexport default { instance };\n"],"names":["CLASSNAME","SiteNav","this","initialized","_opened","_handleTriggers","bind","_handleKeyDown","_onCloseCompleted","name","init","siteHeader","$","el","triggers","$$","id","_bindEvents","destroy","_unbindEvents","on","window","emitter","off","open","state","dispatch","body","emit","forEach","btn","setAttribute","classList","add","close","remove","toggle","event","preventDefault","stopPropagation","key","opened","instance"],"sourceRoot":""}